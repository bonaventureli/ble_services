/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Wed Jan 24 15:19:20 2018. */

#ifndef PB_INGEEK_DIGITALKEY_PB_H_INCLUDED
#define PB_INGEEK_DIGITALKEY_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(32) ingeek_DK_AuthG_df_t;
typedef PB_BYTES_ARRAY_T(16) ingeek_DK_AuthG_s_cmac_t;
typedef struct _ingeek_DK_AuthG {
    int32_t flags;
    ingeek_DK_AuthG_df_t df;
    ingeek_DK_AuthG_s_cmac_t s_cmac;
/* @@protoc_insertion_point(struct:ingeek_DK_AuthG) */
} ingeek_DK_AuthG;



typedef PB_BYTES_ARRAY_T(48) ingeek_DK_Cmd_sparam_t;
typedef struct _ingeek_DK_Cmd {
    int32_t command;
    int32_t result;
    bool has_index;
    int32_t index;
    bool has_permission;
    int32_t permission;
    bool has_sparam;
    ingeek_DK_Cmd_sparam_t sparam;
/* @@protoc_insertion_point(struct:ingeek_DK_Cmd) */
} ingeek_DK_Cmd;

typedef PB_BYTES_ARRAY_T(8) ingeek_DK_InfoR_TRnd_t;
typedef struct _ingeek_DK_InfoR {
    char VIN[20];
    ingeek_DK_InfoR_TRnd_t TRnd;
/* @@protoc_insertion_point(struct:ingeek_DK_InfoR) */
} ingeek_DK_InfoR;

typedef PB_BYTES_ARRAY_T(48) ingeek_DK_InfoW_KEY_t;
typedef PB_BYTES_ARRAY_T(16) ingeek_DK_InfoW_sign_t;
typedef struct _ingeek_DK_InfoW {
    int32_t etype;
    char VIN[20];
    ingeek_DK_InfoW_KEY_t KEY;
    bool has_sign;
    ingeek_DK_InfoW_sign_t sign;
    bool has_index;
    int32_t index;
/* @@protoc_insertion_point(struct:ingeek_DK_InfoW) */
} ingeek_DK_InfoW;

typedef PB_BYTES_ARRAY_T(48) ingeek_DK_Msg_sparam_t;
typedef struct _ingeek_DK_Msg {
    int32_t message;
    bool has_result;
    int32_t result;
    bool has_index;
    int32_t index;
    bool has_permission;
    int32_t permission;
    bool has_sparam;
    ingeek_DK_Msg_sparam_t sparam;
/* @@protoc_insertion_point(struct:ingeek_DK_Msg) */
} ingeek_DK_Msg;

typedef struct _ingeek_DK_Time {
    int32_t seconds;
/* @@protoc_insertion_point(struct:ingeek_DK_Time) */
} ingeek_DK_Time;

typedef PB_BYTES_ARRAY_T(16) ingeek_EncryptedData_cipher_t;
typedef struct _ingeek_EncryptedData {
    int32_t etype;
    bool has_kvno;
    int32_t kvno;
    ingeek_EncryptedData_cipher_t cipher;
/* @@protoc_insertion_point(struct:ingeek_EncryptedData) */
} ingeek_EncryptedData;

typedef PB_BYTES_ARRAY_T(6) ingeek_DK_AuthX_caddr_t;
typedef struct _ingeek_DK_AuthX {
    int32_t flags;
    ingeek_EncryptedData keys;
    char crealm[20];
    char cname[20];
    ingeek_DK_Time authtime;
    bool has_starttime;
    ingeek_DK_Time starttime;
    ingeek_DK_Time endtime;
    bool has_renew_till;
    ingeek_DK_Time renew_till;
    bool has_caddr;
    ingeek_DK_AuthX_caddr_t caddr;
    int32_t auth_data;
/* @@protoc_insertion_point(struct:ingeek_DK_AuthX) */
} ingeek_DK_AuthX;


typedef PB_BYTES_ARRAY_T(16) ingeek_DK_RTC_sign_t;
typedef struct _ingeek_DK_RTC {
    int32_t etype;
    char VIN[20];
    ingeek_DK_Time rtc_time;
    bool has_sign;
    ingeek_DK_RTC_sign_t sign;
/* @@protoc_insertion_point(struct:ingeek_DK_RTC) */
} ingeek_DK_RTC;


typedef PB_BYTES_ARRAY_T(8) ingeek_DK_SessionG_TRnd_t;
typedef PB_BYTES_ARRAY_T(16) ingeek_DK_SessionG_SEID_t;
typedef PB_BYTES_ARRAY_T(8) ingeek_DK_SessionG_CRnD_t;
typedef PB_BYTES_ARRAY_T(16) ingeek_DK_SessionG_TEEID_t;
typedef PB_BYTES_ARRAY_T(32) ingeek_DK_SessionG_KICC_t;
typedef PB_BYTES_ARRAY_T(32) ingeek_DK_SessionG_KIFD_t;
typedef struct _ingeek_DK_SessionG {
    int32_t avno;
    ingeek_DK_SessionG_TRnd_t TRnd;
    ingeek_DK_SessionG_SEID_t SEID;
    ingeek_DK_SessionG_CRnD_t CRnD;
    ingeek_DK_SessionG_TEEID_t TEEID;
    bool has_KICC;
    ingeek_DK_SessionG_KICC_t KICC;
    bool has_KIFD;
    ingeek_DK_SessionG_KIFD_t KIFD;
    bool has_KPRE;
    int32_t KPRE;
    bool has_ENDTIME;
    ingeek_DK_Time ENDTIME;
/* @@protoc_insertion_point(struct:ingeek_DK_SessionG) */
} ingeek_DK_SessionG;

typedef PB_BYTES_ARRAY_T(16) ingeek_DK_SessionX_seq_number_t;
typedef struct _ingeek_DK_SessionX {
    int32_t avno;
    char crealm[20];
    char cname[20];
    ingeek_DK_Time ctime;
    bool has_cusec;
    int32_t cusec;
    bool has_EncryptionKey;
    int32_t EncryptionKey;
    ingeek_DK_SessionX_seq_number_t seq_number;
    int32_t auth_data;
/* @@protoc_insertion_point(struct:ingeek_DK_SessionX) */
} ingeek_DK_SessionX;

/* Default values for struct fields */

/* Initializer values for message structs */
#define ingeek_DK_Time_init_default              {0}
#define ingeek_EncryptedData_init_default        {0, false, 0, {0, {0}}}
#define ingeek_DK_AuthX_init_default             {0, ingeek_EncryptedData_init_default, "", "", ingeek_DK_Time_init_default, false, ingeek_DK_Time_init_default, ingeek_DK_Time_init_default, false, ingeek_DK_Time_init_default, false, {0, {0}}, 0}
#define ingeek_DK_AuthG_init_default             {0, {0, {0}}, {0, {0}}}
#define ingeek_DK_SessionX_init_default          {0, "", "", ingeek_DK_Time_init_default, false, 0, false, 0, {0, {0}}, 0}
#define ingeek_DK_SessionG_init_default          {0, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, 0, false, ingeek_DK_Time_init_default}
#define ingeek_DK_Cmd_init_default               {0, 0, false, 0, false, 0, false, {0, {0}}}
#define ingeek_DK_InfoW_init_default             {0, "", {0, {0}}, false, {0, {0}}, false, 0}
#define ingeek_DK_InfoR_init_default             {"", {0, {0}}}
#define ingeek_DK_Msg_init_default               {0, false, 0, false, 0, false, 0, false, {0, {0}}}
#define ingeek_DK_RTC_init_default               {0, "", ingeek_DK_Time_init_default, false, {0, {0}}}
#define ingeek_DK_Time_init_zero                 {0}
#define ingeek_EncryptedData_init_zero           {0, false, 0, {0, {0}}}
#define ingeek_DK_AuthX_init_zero                {0, ingeek_EncryptedData_init_zero, "", "", ingeek_DK_Time_init_zero, false, ingeek_DK_Time_init_zero, ingeek_DK_Time_init_zero, false, ingeek_DK_Time_init_zero, false, {0, {0}}, 0}
#define ingeek_DK_AuthG_init_zero                {0, {0, {0}}, {0, {0}}}
#define ingeek_DK_SessionX_init_zero             {0, "", "", ingeek_DK_Time_init_zero, false, 0, false, 0, {0, {0}}, 0}
#define ingeek_DK_SessionG_init_zero             {0, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, 0, false, ingeek_DK_Time_init_zero}
#define ingeek_DK_Cmd_init_zero                  {0, 0, false, 0, false, 0, false, {0, {0}}}
#define ingeek_DK_InfoW_init_zero                {0, "", {0, {0}}, false, {0, {0}}, false, 0}
#define ingeek_DK_InfoR_init_zero                {"", {0, {0}}}
#define ingeek_DK_Msg_init_zero                  {0, false, 0, false, 0, false, 0, false, {0, {0}}}
#define ingeek_DK_RTC_init_zero                  {0, "", ingeek_DK_Time_init_zero, false, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define ingeek_DK_AuthG_flags_tag                1
#define ingeek_DK_AuthG_df_tag                   2
#define ingeek_DK_AuthG_s_cmac_tag               3
#define ingeek_DK_Cmd_command_tag                1
#define ingeek_DK_Cmd_result_tag                 2
#define ingeek_DK_Cmd_index_tag                  3
#define ingeek_DK_Cmd_permission_tag             4
#define ingeek_DK_Cmd_sparam_tag                 5
#define ingeek_DK_InfoR_VIN_tag                  1
#define ingeek_DK_InfoR_TRnd_tag                 2
#define ingeek_DK_InfoW_etype_tag                1
#define ingeek_DK_InfoW_VIN_tag                  2
#define ingeek_DK_InfoW_KEY_tag                  3
#define ingeek_DK_InfoW_sign_tag                 4
#define ingeek_DK_InfoW_index_tag                5
#define ingeek_DK_Msg_message_tag                1
#define ingeek_DK_Msg_result_tag                 2
#define ingeek_DK_Msg_index_tag                  3
#define ingeek_DK_Msg_permission_tag             4
#define ingeek_DK_Msg_sparam_tag                 5
#define ingeek_DK_Time_seconds_tag               1
#define ingeek_EncryptedData_etype_tag           1
#define ingeek_EncryptedData_kvno_tag            2
#define ingeek_EncryptedData_cipher_tag          3
#define ingeek_DK_AuthX_flags_tag                1
#define ingeek_DK_AuthX_keys_tag                 2
#define ingeek_DK_AuthX_crealm_tag               3
#define ingeek_DK_AuthX_cname_tag                4
#define ingeek_DK_AuthX_authtime_tag             5
#define ingeek_DK_AuthX_starttime_tag            6
#define ingeek_DK_AuthX_endtime_tag              7
#define ingeek_DK_AuthX_renew_till_tag           8
#define ingeek_DK_AuthX_caddr_tag                9
#define ingeek_DK_AuthX_auth_data_tag            10
#define ingeek_DK_RTC_etype_tag                  1
#define ingeek_DK_RTC_VIN_tag                    2
#define ingeek_DK_RTC_rtc_time_tag               3
#define ingeek_DK_RTC_sign_tag                   4
#define ingeek_DK_SessionG_avno_tag              1
#define ingeek_DK_SessionG_TRnd_tag              2
#define ingeek_DK_SessionG_SEID_tag              3
#define ingeek_DK_SessionG_CRnD_tag              4
#define ingeek_DK_SessionG_TEEID_tag             5
#define ingeek_DK_SessionG_KICC_tag              6
#define ingeek_DK_SessionG_KIFD_tag              7
#define ingeek_DK_SessionG_KPRE_tag              8
#define ingeek_DK_SessionG_ENDTIME_tag           9
#define ingeek_DK_SessionX_avno_tag              1
#define ingeek_DK_SessionX_crealm_tag            2
#define ingeek_DK_SessionX_cname_tag             3
#define ingeek_DK_SessionX_ctime_tag             4
#define ingeek_DK_SessionX_cusec_tag             5
#define ingeek_DK_SessionX_EncryptionKey_tag     6
#define ingeek_DK_SessionX_seq_number_tag        7
#define ingeek_DK_SessionX_auth_data_tag         8

/* Struct field encoding specification for nanopb */
extern const pb_field_t ingeek_DK_Time_fields[2];
extern const pb_field_t ingeek_EncryptedData_fields[4];
extern const pb_field_t ingeek_DK_AuthX_fields[11];
extern const pb_field_t ingeek_DK_AuthG_fields[4];
extern const pb_field_t ingeek_DK_SessionX_fields[9];
extern const pb_field_t ingeek_DK_SessionG_fields[10];
extern const pb_field_t ingeek_DK_Cmd_fields[6];
extern const pb_field_t ingeek_DK_InfoW_fields[6];
extern const pb_field_t ingeek_DK_InfoR_fields[3];
extern const pb_field_t ingeek_DK_Msg_fields[6];
extern const pb_field_t ingeek_DK_RTC_fields[5];

/* Maximum encoded size of messages (where known) */
#define ingeek_DK_Time_size                      11
#define ingeek_EncryptedData_size                40
#define ingeek_DK_AuthX_size                     168
#define ingeek_DK_AuthG_size                     63
#define ingeek_DK_SessionX_size                  119
#define ingeek_DK_SessionG_size                  159
#define ingeek_DK_Cmd_size                       55
#define ingeek_DK_InfoW_size                     93
#define ingeek_DK_InfoR_size                     32
#define ingeek_DK_Msg_size                       67
#define ingeek_DK_RTC_size                       50
/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define DIGITALKEY_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
